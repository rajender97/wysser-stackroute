version: '3'
services:
 mongodb:
   image: mongo
   ports:
     - "27017:27017"
   container_name: mongo-container
   network_mode: host
 neo4j:
   image: neo4j:latest
   container_name: neo4j
   ports:
     - '7474:8484'
     - '7687:7687'
   environment:
     - NEO4J_AUTH=neo4j/12345 
   network_mode: host  
 mysql1:
   image: mysql:5.7
   container_name: mysql-container
   network_mode: host
   ports:
     - "3306:3306"
   restart: always
   environment:
#     MYSQL_DATABASE: register_db
     MYSQL_USER: root
     MYSQL_ROOT_PASSWORD: Root@123
   entrypoint:
     sh -c "
     echo 'CREATE DATABASE IF NOT EXISTS register_db; CREATE DATABASE IF NOT EXISTS Retailers;  CREATE DATABASE IF NOT EXISTS test;' > /docker-entrypoint-initdb.d/init.sql;
     /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
     "
   volumes:
   - /db-data:/var/lib/mysql
 zuul:
   image: zuul
   restart: always
   build: zuul-service/
   container_name: zuul-container
   network_mode: host
   ports:
     - 8089:8089
   expose:
     - 8089
 eureka:
   image: eureka
   restart: always
   build: eureka-service/
   container_name: eureka-container
   network_mode: host
   ports:
     - "8762:8762"
   expose:
     - 8762
 configserver:
   image: configserver
   restart: always
   build: config-service/
   container_name: configserver-container
   network_mode: host
   ports:
     - "8889:8889"
   expose:
     - 8889

 authentication-service:
   image: authentication
   build: authentication-service/
   restart: always
   network_mode: host
   container_name: authentication
   depends_on:
     - mysql1
   ports:
     - "8085:8085"
   expose:
     - 8085
 order-service:
   image: order-service
   build: order-service/
   restart: always
   network_mode: host
   container_name: order-serv
   depends_on:
    - neo4j
   ports:
     - "7687:7687"
     - "8080:8080"
   expose:
       - 7687
       - 8080
 angular-frontend:
     image: angular-frontend
     build: angular-frontend/
     hostname: localhost
     container_name: angular-container
     network_mode: 'host'
#     build: .
     ports:
       - 80:80
 driver-dashboard-service:
     image: driver-dashboard-service
     build: driver-dashboard-service/
     restart: always
     network_mode: host
     container_name: driver-dashboard
     ports:
       - "8086:8086"
 retailer-profile-service:
   image: retailer-profile-service
   build: retailer-profile-service/
   restart: always
   network_mode: host
   container_name: retailer-profile
   depends_on:
     - mysql1
   ports:
     - "8082:8082"     
 registration-varification-service:
   image: registration-varification-service
   build: registration-varification-service/
   restart: always
   network_mode: host
   depends_on:
     - mysql1
   container_name: retailer-registration
   ports:
     - "8084:8084"
